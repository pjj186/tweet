{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["authService","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","dbService","getFirestore","storageService","getStorage","withRouter","refreshUser","history","setUserObject","userObj","useState","displayName","newDisplayName","setNewDisplayName","getMyTweets","a","q","query","collection","where","uid","orderBy","getDocs","forEach","doc","console","log","id","data","useEffect","onSubmit","event","preventDefault","updateProfile","currentUser","className","onChange","value","target","autoFocus","type","placeholder","style","marginTop","onClick","signOut","push","AuthForm","newAccount","setNewAccount","email","setEmail","password","setPassword","error","setError","e","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","required","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","TweetTextRef","onDeleteClick","window","confirm","deleteDoc","deleteObject","ref","attachmentUrl","toggleEditing","updateDoc","src","alt","class","faTrash","faPencilAlt","TweetFactory","tweet","setTweet","attachment","setAttachment","fileInput","useRef","attachmentRef","uuidv4","uploadString","getDownloadURL","createdAt","serverTimestamp","creatorId","addDoc","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","current","faTimes","Home","tweets","setTweets","onSnapshot","snapshot","tweetArr","docs","map","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","Router","basename","maxWidth","width","margin","exact","path","App","init","setInit","onAuthStateChanged","user","args","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c2bdfe9.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const authService = getAuth();\r\n\r\nexport const dbService = getFirestore();\r\n\r\nexport const storageService = getStorage();\r\n\r\nexport default app;\r\n","import { authService, dbService } from \"fbase\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  orderBy,\r\n} from \"@firebase/firestore\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { updateProfile } from \"@firebase/auth\";\r\n\r\nconst Profile = ({ refreshUser, history, setUserObject, userObj }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    setUserObject(null);\r\n    history.push(\"/\");\r\n  };\r\n  const getMyTweets = async () => {\r\n    const q = query(\r\n      collection(dbService, \"tweets\"),\r\n      // 데이터베이스에서 현재 로그인 중인 uid와 같은 creatorId를 찾는다.\r\n      where(\"creatorId\", \"==\", userObj.uid),\r\n      orderBy(\"createdAt\", \"desc\")\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    querySnapshot.forEach((doc) => {\r\n      console.log(doc.id, \"=>\", doc.data());\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getMyTweets();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await updateProfile(await authService.currentUser, {\r\n        displayName: newDisplayName,\r\n      });\r\n    }\r\n    refreshUser();\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          value={newDisplayName}\r\n          autoFocus\r\n          className=\"formInput\"\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Profile);\r\n","import { authService } from \"fbase\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from \"@firebase/auth\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { name, value },\r\n    } = e;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        // 계정 생성\r\n        data = await createUserWithEmailAndPassword(\r\n          authService,\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        // 로그인\r\n        data = await signInWithEmailAndPassword(authService, email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (e) {\r\n      setError(e.message);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? \"Create Account\" : \"Log In\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService } from \"fbase\";\r\nimport {\r\n  GithubAuthProvider,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n} from \"@firebase/auth\";\r\nimport React from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n  // newAccount state의 상태를 토글해주는 함수\r\n  const onSocialClick = async (e) => {\r\n    const {\r\n      target: { name },\r\n    } = e;\r\n    let provider; // 소셜 로그인을 하기위해선 첫번째로 provider를 만들어줘야함\r\n    if (name === \"google\") {\r\n      provider = new GoogleAuthProvider(); // GoogleAuthProvider 생성\r\n    } else if (name === \"github\") {\r\n      provider = new GithubAuthProvider(); // GithubAuthProvier 생성\r\n    }\r\n    const data = await signInWithPopup(authService, provider);\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { doc, deleteDoc, updateDoc } from \"firebase/firestore\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { deleteObject, ref } from \"@firebase/storage\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); // editing 모드를 위한 상태\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text); // input에 입력된 text를 업데이트 해주기 위한 상태\r\n  const TweetTextRef = doc(dbService, \"tweets\", `${tweetObj.id}`);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"정말 삭제하시겠습니까?\");\r\n    // confirm은 true or false 반환\r\n    if (ok) {\r\n      // 삭제\r\n      await deleteDoc(TweetTextRef);\r\n      // tweetObj의 attachmentUrl의 ref을 스토리지에서 삭제\r\n      // attachmentUrl은 파일이 저장된 경로이고, 스토리지 내의 그 경로의 object를 삭제해주는거\r\n      await deleteObject(ref(storageService, tweetObj.attachmentUrl));\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev); // 이전값을 반전시켜줌\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // 업데이트 부분\r\n    await updateDoc(TweetTextRef, {\r\n      text: newTweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n  return (\r\n    <div className=\"tweet\">\r\n      {editing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Edit your Tweet\"\r\n                  value={newTweet}\r\n                  required\r\n                  autoFocus\r\n                  onChange={onChange}\r\n                  className=\"formInput\"\r\n                />\r\n                <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\" />\r\n              </form>\r\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                Cancel\r\n              </span>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{tweetObj.text}</h4>\r\n          {tweetObj.attachmentUrl && (\r\n            <img src={tweetObj.attachmentUrl} alt=\"Avatar\" />\r\n          )}\r\n          {isOwner && (\r\n            <div class=\"tweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService, dbService } from \"fbase\";\r\nimport { getDownloadURL, ref, uploadString } from \"@firebase/storage\";\r\nimport { addDoc, collection, serverTimestamp } from \"firebase/firestore\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n  const [tweet, setTweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const fileInput = useRef();\r\n\r\n  const onSubmit = async (event) => {\r\n    if (tweet === \"\") {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      // attachment가 존재하면\r\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`); // 파일에 대한 reference 생성\r\n      await uploadString(attachmentRef, attachment, \"data_url\"); // ref, 데이터, 데이터의 형식\r\n      attachmentUrl = await getDownloadURL(attachmentRef);\r\n    }\r\n    const newTweet = {\r\n      text: tweet,\r\n      createdAt: serverTimestamp(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await addDoc(collection(dbService, \"tweets\"), newTweet);\r\n    setTweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    // FileRead API\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      // 파일을 모두 읽으면 finishedEvent를 받는다.\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // 파일을 읽기 시작\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(\"\");\r\n    fileInput.current.value = null;\r\n  };\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          name=\"tweet\"\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        ref={fileInput}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n            alt=\"Preview\"\r\n          />\r\n          <div className=\"factoryFrom__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { dbService } from \"fbase\";\r\nimport { collection, query, orderBy, onSnapshot } from \"firebase/firestore\";\r\nimport Tweet from \"components/Tweet\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  // 변수\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  // 함수\r\n  useEffect(() => {\r\n    const q = query(\r\n      collection(dbService, \"tweets\"),\r\n      orderBy(\"createdAt\", \"desc\")\r\n    );\r\n    // 데이터베이스에서 뭔가를 하게 되면 알 수 있도록 해주는 것\r\n    // snapshot을 이용하면 실시간으로 볼 수 있다.\r\n    onSnapshot(q, (snapshot) => {\r\n      const tweetArr = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setTweets(tweetArr);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid} // 로그인한 유저와 트윗을 만든 유저의 id를 비교\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n      <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span\r\n            style={{\r\n              marginTop: 10,\r\n            }}\r\n          >\r\n            {userObj.displayName}의 Profile\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst Router = ({ refreshUser, userObj, setUserObject }) => {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      {userObj && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {userObj ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: \"100%\",\r\n              margin: \"0 auto\",\r\n              marginTop: 80,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile\r\n                userObj={userObj}\r\n                setUserObject={setUserObject}\r\n                refreshUser={refreshUser}\r\n              />\r\n            </Route>\r\n          </div>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React, { useEffect, useState } from \"react\";\nimport Router from \"./Router\";\nimport { authService } from \"../fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObject] = useState(null);\n  useEffect(() => {\n    // 사용자의 로그인 상태의 변화를 관찰하는 관찰자를 추가시켜줌\n    authService.onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        if (user.displayName === null) {\n          setUserObject({\n            displayName: \"User\",\n            uid: user.uid,\n            updateProfile: (args) => user.updateProfile(args),\n          });\n        } else {\n          setUserObject({\n            displayName: user.displayName,\n            uid: user.uid,\n            // 여기서 updateProfile 함수는 우리가 원하는 updateProfile 함수를 제공해주는 역할\n            updateProfile: (args) => user.updateProfile(args),\n          });\n        }\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObject({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <Router\n          refreshUser={refreshUser}\n          userObj={userObj}\n          setUserObject={setUserObject}\n        />\n      ) : (\n        \"Initializeing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}